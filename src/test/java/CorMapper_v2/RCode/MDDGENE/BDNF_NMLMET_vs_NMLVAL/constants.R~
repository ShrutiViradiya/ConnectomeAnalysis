#
# 並列処理関連
#
#ITERATION_COUNT <- 5000 # シミュレーション回数。マシンの能力に合わせて調節。
ITERATION_COUNT <- 1000 # シミュレーション回数。マシンの能力に合わせて調節。
#ITERATION_COUNT <- 100 # シミュレーション回数。マシンの能力に合わせて調節。
#ITERATION_COUNT <- 10 # シミュレーション回数。マシンの能力に合わせて調節。
#ITERATION_COUNT <- 5 # シミュレーション回数。マシンの能力に合わせて調節。
SEED_OF_RAND <- 314159 # 乱数の種を投入
#CPU_CORE_COUNT <- 3
CPU_CORE_COUNT <- 16

#
# 比較対象グループの指定
#
#COMPARISON_PATTERN <- "nmlGA_vs_nmlGG"
#COMPARISON_PATTERN <- "nmlGA_vs_nmlAA"
#COMPARISON_PATTERN <- "nmlGA_vs_nmlNA"
#COMPARISON_PATTERN <- "nmlGA_vs_mddAA"
#COMPARISON_PATTERN <- "nmlGA_vs_mddGA"
#COMPARISON_PATTERN <- "nmlGA_vs_mddGG"
#COMPARISON_PATTERN <- "nmlGA_vs_mddNA"
#COMPARISON_PATTERN <- "nmlGG_vs_nmlAA"
#COMPARISON_PATTERN <- "nmlGG_vs_nmlNA"
#COMPARISON_PATTERN <- "nmlGG_vs_mddAA"
#COMPARISON_PATTERN <- "nmlGG_vs_mddGA"
#COMPARISON_PATTERN <- "nmlGG_vs_mddGG"
#COMPARISON_PATTERN <- "nmlGG_vs_mddNA"
#COMPARISON_PATTERN <- "nmlAA_vs_nmlNA"
#COMPARISON_PATTERN <- "nmlAA_vs_mddAA"
#COMPARISON_PATTERN <- "nmlAA_vs_mddGA"
#COMPARISON_PATTERN <- "nmlAA_vs_mddGG"
#COMPARISON_PATTERN <- "nmlAA_vs_mddNA"
#COMPARISON_PATTERN <- "nmlNA_vs_mddAA"
#COMPARISON_PATTERN <- "nmlNA_vs_mddGA"
#COMPARISON_PATTERN <- "nmlNA_vs_mddGG"
#COMPARISON_PATTERN <- "nmlNA_vs_mddNA"
#COMPARISON_PATTERN <- "mddAA_vs_mddGA"
#COMPARISON_PATTERN <- "mddAA_vs_mddGG"
#COMPARISON_PATTERN <- "mddAA_vs_mddNA"
#COMPARISON_PATTERN <- "mddGA_vs_mddGG"
#COMPARISON_PATTERN <- "mddGA_vs_mddNA"
#COMPARISON_PATTERN <- "mddGG_vs_mddNA"

#COMPARISON_PATTERN <- "MDDMET_vs_MDDVAL"
#COMPARISON_PATTERN <- "MDDMET_vs_NMLMET"
#COMPARISON_PATTERN <- "MDDMET_vs_NMLVAL"
#COMPARISON_PATTERN <- "MDDVAL_vs_NMLMET"
#COMPARISON_PATTERN <- "MDDVAL_vs_NMLVAL"
COMPARISON_PATTERN <- "NMLMET_vs_NMLVAL"
#COMPARISON_PATTERN <- "NML_vs_MDD"


TARGET_AREA <- "deep+surf"
#TARGET_AREA <- "deep"
#TARGET_AREA <- "surf"
#TARGET_AREA <- "hipposub"
#TARGET_AREA <- "6nodes"

#
# Weightedなグラフを生成するか、Binarizedなグラフを生成するか
#
#SHOULD_MAKE_WEIGHTED_UNDIRECTED_GRAPH <- TRUE
SHOULD_MAKE_WEIGHTED_UNDIRECTED_GRAPH <- FALSE
#SHOULD_MAKE_BINARY_UNDIRECTED_GRAPH <- FALSE
SHOULD_MAKE_BINARY_UNDIRECTED_GRAPH <- TRUE

#グラフ画像を出力するか否か
#shouldOutputImage <- FALSE
#shouldOutputImage <- TRUE

#
#------------------------------通常は以下の変更の必要なし----------------------------------
#
# <<surf>>
# R_TTMP, R_STMP, R_SPAR, R_SMAR, R_SFRT, R_RMFR, R_PTRI, R_PSTC, R_PREC, R_PORB, R_POPE, R_PCUN, R_PCAL,
# R_PARC, R_MTMP, R_MOFR, R_LOFR, R_LOCC, R_LING, R_ITMP, R_IPAR, R_INSU, R_FUSI, R_CUNE, R_CMFR, R_AMYG,
# L_TTMP, L_STMP, L_SPAR, L_SMAR, L_SFRT, L_RMFR, L_PTRI, L_PSTC, L_PREC, L_PORB, L_POPE, L_PCUN, L_PCAL,
# L_PARC, L_MTMP, L_MOFR, L_LOFR, L_LOCC, L_LING, L_ITMP, L_IPAR, L_INSU, L_FUSI, L_CUNE, L_CMFR, L_AMYG,
# BSTM

# <<deep>>
# R_THAL, R_RCIN, R_PUTA, R_PHIP, R_PCIN, R_PALL, R_ICIN, R_HIPP, R_ENTO, R_CCIN, R_CAUD, R_ACMB
# L_THAL, L_RCIN, L_PUTA, L_PHIP, L_PCIN, L_PALL, L_ICIN, L_HIPP, L_ENTO, L_CCIN, L_CAUD, L_ACMB

#
# 解析対象脳領域に従って体積情報の格納先を切り替える
#
# 深部領域＋皮質領を解析対象にしたい場合

if(TARGET_AREA=="deep+surf") DATA_ORDER_INFO <- "../../StatsData_converted/surf+deep/DataOrderInfo.txt"
if(TARGET_AREA=="deep+surf") ETIV_FILE_PATH <- "../../StatsData_converted/surf+deep/eTIV.txt"
if(TARGET_AREA=="deep+surf") VOL_DATA_OF_EACH_AREA_FLD_PATH <- "../../StatsData_converted/surf+deep/VolDataOfEachArea/"
# 深部領域のみを解析対象にしたい場合
if(TARGET_AREA=="deep") DATA_ORDER_INFO <- "../../StatsData_converted/deep/DataOrderInfo.txt"
if(TARGET_AREA=="deep") ETIV_FILE_PATH <- "../../StatsData_converted/deep/eTIV.txt"
if(TARGET_AREA=="deep") VOL_DATA_OF_EACH_AREA_FLD_PATH <- "../../StatsData_converted/deep/VolDataOfEachArea/"
# 皮質領域のみを解析対象にしたい場合
if(TARGET_AREA=="surf") DATA_ORDER_INFO <- "../../StatsData_converted/surf/DataOrderInfo.txt"
if(TARGET_AREA=="surf") ETIV_FILE_PATH <- "../../StatsData_converted/surf/eTIV.txt"
if(TARGET_AREA=="surf") VOL_DATA_OF_EACH_AREA_FLD_PATH <- "../../StatsData_converted/surf/VolDataOfEachArea/"
# 海馬亜領域のみを解析対象にしたい場合
if(TARGET_AREA=="hipposub") DATA_ORDER_INFO <- "../../StatsData_converted/hipposub/DataOrderInfo.txt"
if(TARGET_AREA=="hipposub") ETIV_FILE_PATH <- "../../StatsData_converted/hipposub/eTIV.txt"
if(TARGET_AREA=="hipposub") VOL_DATA_OF_EACH_AREA_FLD_PATH <- "../../StatsData_converted/hipposub/VolDataOfEachArea/"
# テスト用：６領域のみを解析対象としたい場合
if(TARGET_AREA=="6nodes") DATA_ORDER_INFO <- "../../StatsData_converted/6nodes/DataOrderInfo.txt"
if(TARGET_AREA=="6nodes") ETIV_FILE_PATH <- "../../StatsData_converted/6nodes/eTIV.txt"
if(TARGET_AREA=="6nodes") VOL_DATA_OF_EACH_AREA_FLD_PATH <- "../../StatsData_converted/6nodes/VolDataOfEachArea/"

statsdata_converted <- "../../StatsData_converted/XXX/surf+deep"
statsdata_converted <- "../../../StatsData_converted/MDDGENE/surf+deep"
if(TARGET_AREA=="deep+surf") DATA_ORDER_INFO <- paste(statsdata_converted, "/DataOrderInfo.txt", sep="")
if(TARGET_AREA=="deep+surf") ETIV_FILE_PATH <- paste(statsdata_converted, "/eTIV.txt", sep="")
if(TARGET_AREA=="deep+surf") VOL_DATA_OF_EACH_AREA_FLD_PATH <- paste(statsdata_converted, "/VolDataOfEachArea/", sep="")

#
#
# Subject関連情報の格納先
#
SBJECT_PROFILE_FILE_PATH <- "../../ProfileData_converted/Profile_XXX_with_givenid.txt"
SBJECT_PROFILE_FILE_PATH <- "../../../ProfileData_converted/Profile_BDNFV66M_with_givenid.txt"


#
# ConvertedDataフォルダ内での各症例の格納行数
#

group_nmlGA <-  c(1, 3, 7, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 23, 25, 26, 28, 33, 36, 38, 40, 42, 45, 46, 47, 48)
group_nmlGG <-  c(2, 5, 8, 12, 13, 18, 19, 27, 29, 30, 31, 34, 35, 37, 41, 44)
group_nmlAA <-  c(4, 6, 24, 32, 43)
group_nmlNA <-  c(39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78)
group_mddAA <-  c(79, 81, 89, 90, 95, 96, 98, 101, 107)
group_mddGA <-  c(80, 83, 85, 86, 88, 92, 93, 94, 97, 99, 100, 102, 104, 105, 106)
group_mddGG <-  c(82, 84, 87, 91, 103, 108, 109, 110, 111, 112, 113)
group_mddNA <-  c(114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151)


#nmlmet-----ConvertedDataフォルダ内でXX行目に格納されている
# c01, c03, c04, c06, c07,
#group_NMLMET <- c(1, 3, 4, 6, 7, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 28, 32, 33, 36, 38, 40, 42, 43, 45, 46, 47, 48)
group_NMLMET <- c(group_nmlGA, group_nmlAA)

#nmlval-------ConvertedDataフォルダ内でXX行目に格納されている
#group_NMLVAL <- c(2, 5, 8, 12, 13, 18, 19, 27, 29, 30, 31, 34, 35, 37, 41, 44)
group_NMLVAL <- c(group_nmlGG)

#mddmet--------ConvertedDataフォルダ内でXX行目に格納されている
group_MDDMET <- c(79, 80, 81, 83, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107)

#mddval------ConvertedDataフォルダ内でXX行目に格納されている
group_MDDVAL <- c(82, 84, 87, 91, 103, 108, 109, 110, 111, 112, 113)

#nml
group_NML <- c(1, 3, 4, 6, 7, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 28, 32, 33, 36, 38, 40, 42, 43, 45, 46, 47, 48, 2, 5, 8, 12, 13, 18, 19, 27, 29, 30, 31, 34, 35, 37, 41, 44)

#mdd
group_MDD <- c(79, 80, 81, 83, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 82, 84, 87, 91, 103, 108, 109, 110, 111, 112, 113)

#
# 比較対象グループの関連の変数設定
#

## nmlGA_vs_nmlGG
if(COMPARISON_PATTERN=="nmlGA_vs_nmlGG") ORIGINAL_GROUP_A_INDEXES <- group_nmlGA
if(COMPARISON_PATTERN=="nmlGA_vs_nmlGG") ORIGINAL_GROUP_B_INDEXES <- group_nmlGG
## nmlGA_vs_nmlAA
if(COMPARISON_PATTERN=="nmlGA_vs_nmlAA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGA
if(COMPARISON_PATTERN=="nmlGA_vs_nmlAA") ORIGINAL_GROUP_B_INDEXES <- group_nmlAA
## nmlGA_vs_nmlNA
if(COMPARISON_PATTERN=="nmlGA_vs_nmlNA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGA
if(COMPARISON_PATTERN=="nmlGA_vs_nmlNA") ORIGINAL_GROUP_B_INDEXES <- group_nmlNA
## nmlGA_vs_mddAA
if(COMPARISON_PATTERN=="nmlGA_vs_mddAA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGA
if(COMPARISON_PATTERN=="nmlGA_vs_mddAA") ORIGINAL_GROUP_B_INDEXES <- group_mddAA
## nmlGA_vs_mddGA
if(COMPARISON_PATTERN=="nmlGA_vs_mddGA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGA
if(COMPARISON_PATTERN=="nmlGA_vs_mddGA") ORIGINAL_GROUP_B_INDEXES <- group_mddGA
## nmlGA_vs_mddGG
if(COMPARISON_PATTERN=="nmlGA_vs_mddGG") ORIGINAL_GROUP_A_INDEXES <- group_nmlGA
if(COMPARISON_PATTERN=="nmlGA_vs_mddGG") ORIGINAL_GROUP_B_INDEXES <- group_mddGG
## nmlGA_vs_mddNA
if(COMPARISON_PATTERN=="nmlGA_vs_mddNA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGA
if(COMPARISON_PATTERN=="nmlGA_vs_mddNA") ORIGINAL_GROUP_B_INDEXES <- group_mddNA
## nmlGG_vs_nmlAA
if(COMPARISON_PATTERN=="nmlGG_vs_nmlAA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGG
if(COMPARISON_PATTERN=="nmlGG_vs_nmlAA") ORIGINAL_GROUP_B_INDEXES <- group_nmlAA
## nmlGG_vs_nmlNA
if(COMPARISON_PATTERN=="nmlGG_vs_nmlNA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGG
if(COMPARISON_PATTERN=="nmlGG_vs_nmlNA") ORIGINAL_GROUP_B_INDEXES <- group_nmlNA
## nmlGG_vs_mddAA
if(COMPARISON_PATTERN=="nmlGG_vs_mddAA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGG
if(COMPARISON_PATTERN=="nmlGG_vs_mddAA") ORIGINAL_GROUP_B_INDEXES <- group_mddAA
## nmlGG_vs_mddGA
if(COMPARISON_PATTERN=="nmlGG_vs_mddGA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGG
if(COMPARISON_PATTERN=="nmlGG_vs_mddGA") ORIGINAL_GROUP_B_INDEXES <- group_mddGA
## nmlGG_vs_mddGG
if(COMPARISON_PATTERN=="nmlGG_vs_mddGG") ORIGINAL_GROUP_A_INDEXES <- group_nmlGG
if(COMPARISON_PATTERN=="nmlGG_vs_mddGG") ORIGINAL_GROUP_B_INDEXES <- group_mddGG
## nmlGG_vs_mddNA
if(COMPARISON_PATTERN=="nmlGG_vs_mddNA") ORIGINAL_GROUP_A_INDEXES <- group_nmlGG
if(COMPARISON_PATTERN=="nmlGG_vs_mddNA") ORIGINAL_GROUP_B_INDEXES <- group_mddNA
## nmlAA_vs_nmlNA
if(COMPARISON_PATTERN=="nmlAA_vs_nmlNA") ORIGINAL_GROUP_A_INDEXES <- group_nmlAA
if(COMPARISON_PATTERN=="nmlAA_vs_nmlNA") ORIGINAL_GROUP_B_INDEXES <- group_nmlNA
## nmlAA_vs_mddAA
if(COMPARISON_PATTERN=="nmlAA_vs_mddAA") ORIGINAL_GROUP_A_INDEXES <- group_nmlAA
if(COMPARISON_PATTERN=="nmlAA_vs_mddAA") ORIGINAL_GROUP_B_INDEXES <- group_mddAA
## nmlAA_vs_mddGA
if(COMPARISON_PATTERN=="nmlAA_vs_mddGA") ORIGINAL_GROUP_A_INDEXES <- group_nmlAA
if(COMPARISON_PATTERN=="nmlAA_vs_mddGA") ORIGINAL_GROUP_B_INDEXES <- group_mddGA
## nmlAA_vs_mddGG
if(COMPARISON_PATTERN=="nmlAA_vs_mddGG") ORIGINAL_GROUP_A_INDEXES <- group_nmlAA
if(COMPARISON_PATTERN=="nmlAA_vs_mddGG") ORIGINAL_GROUP_B_INDEXES <- group_mddGG
## nmlAA_vs_mddNA
if(COMPARISON_PATTERN=="nmlAA_vs_mddNA") ORIGINAL_GROUP_A_INDEXES <- group_nmlAA
if(COMPARISON_PATTERN=="nmlAA_vs_mddNA") ORIGINAL_GROUP_B_INDEXES <- group_mddNA
## nmlNA_vs_mddAA
if(COMPARISON_PATTERN=="nmlNA_vs_mddAA") ORIGINAL_GROUP_A_INDEXES <- group_nmlNA
if(COMPARISON_PATTERN=="nmlNA_vs_mddAA") ORIGINAL_GROUP_B_INDEXES <- group_mddAA
## nmlNA_vs_mddGA
if(COMPARISON_PATTERN=="nmlNA_vs_mddGA") ORIGINAL_GROUP_A_INDEXES <- group_nmlNA
if(COMPARISON_PATTERN=="nmlNA_vs_mddGA") ORIGINAL_GROUP_B_INDEXES <- group_mddGA
## nmlNA_vs_mddGG
if(COMPARISON_PATTERN=="nmlNA_vs_mddGG") ORIGINAL_GROUP_A_INDEXES <- group_nmlNA
if(COMPARISON_PATTERN=="nmlNA_vs_mddGG") ORIGINAL_GROUP_B_INDEXES <- group_mddGG
## nmlNA_vs_mddNA
if(COMPARISON_PATTERN=="nmlNA_vs_mddNA") ORIGINAL_GROUP_A_INDEXES <- group_nmlNA
if(COMPARISON_PATTERN=="nmlNA_vs_mddNA") ORIGINAL_GROUP_B_INDEXES <- group_mddNA
## mddAA_vs_mddGA
if(COMPARISON_PATTERN=="mddAA_vs_mddGA") ORIGINAL_GROUP_A_INDEXES <- group_mddAA
if(COMPARISON_PATTERN=="mddAA_vs_mddGA") ORIGINAL_GROUP_B_INDEXES <- group_mddGA
## mddAA_vs_mddGG
if(COMPARISON_PATTERN=="mddAA_vs_mddGG") ORIGINAL_GROUP_A_INDEXES <- group_mddAA
if(COMPARISON_PATTERN=="mddAA_vs_mddGG") ORIGINAL_GROUP_B_INDEXES <- group_mddGG
## mddAA_vs_mddNA
if(COMPARISON_PATTERN=="mddAA_vs_mddNA") ORIGINAL_GROUP_A_INDEXES <- group_mddAA
if(COMPARISON_PATTERN=="mddAA_vs_mddNA") ORIGINAL_GROUP_B_INDEXES <- group_mddNA
## mddGA_vs_mddGG
if(COMPARISON_PATTERN=="mddGA_vs_mddGG") ORIGINAL_GROUP_A_INDEXES <- group_mddGA
if(COMPARISON_PATTERN=="mddGA_vs_mddGG") ORIGINAL_GROUP_B_INDEXES <- group_mddGG
## mddGA_vs_mddNA
if(COMPARISON_PATTERN=="mddGA_vs_mddNA") ORIGINAL_GROUP_A_INDEXES <- group_mddGA
if(COMPARISON_PATTERN=="mddGA_vs_mddNA") ORIGINAL_GROUP_B_INDEXES <- group_mddNA
## mddGG_vs_mddNA
if(COMPARISON_PATTERN=="mddGG_vs_mddNA") ORIGINAL_GROUP_A_INDEXES <- group_mddGG
if(COMPARISON_PATTERN=="mddGG_vs_mddNA") ORIGINAL_GROUP_B_INDEXES <- group_mddNA


# MDDwithMET VS MDDwithVAL
if(COMPARISON_PATTERN=="MDDMET_vs_MDDVAL") ORIGINAL_GROUP_A_INDEXES <- group_MDDMET
if(COMPARISON_PATTERN=="MDDMET_vs_MDDVAL") ORIGINAL_GROUP_B_INDEXES <- group_MDDVAL
# AD VS MCI-NonConverter
if(COMPARISON_PATTERN=="MDDMET_vs_NMLMET") ORIGINAL_GROUP_A_INDEXES <- group_MDDMET
if(COMPARISON_PATTERN=="MDDMET_vs_NMLMET") ORIGINAL_GROUP_B_INDEXES <- group_NMLMET
# AD VS NML
if(COMPARISON_PATTERN=="MDDMET_vs_NMLVAL") ORIGINAL_GROUP_A_INDEXES <- group_MDDMET
if(COMPARISON_PATTERN=="MDDMET_vs_NMLVAL") ORIGINAL_GROUP_B_INDEXES <- group_NMLVAL
# MCI-Converter VS MCI-NonConverter
if(COMPARISON_PATTERN=="MDDVAL_vs_NMLMET") ORIGINAL_GROUP_A_INDEXES <- group_MDDVAL
if(COMPARISON_PATTERN=="MDDVAL_vs_NMLMET") ORIGINAL_GROUP_B_INDEXES <- group_NMLMET
# MCI-Converter VS NML
if(COMPARISON_PATTERN=="MDDVAL_vs_NMLVAL") ORIGINAL_GROUP_A_INDEXES <- group_MDDVAL
if(COMPARISON_PATTERN=="MDDVAL_vs_NMLVAL") ORIGINAL_GROUP_B_INDEXES <- group_NMLVAL
# MCI-NonConverter VS NML
if(COMPARISON_PATTERN=="NMLMET_vs_NMLVAL") ORIGINAL_GROUP_A_INDEXES <- group_NMLMET
if(COMPARISON_PATTERN=="NMLMET_vs_NMLVAL") ORIGINAL_GROUP_B_INDEXES <- group_NMLVAL
# NML vs MDD
if(COMPARISON_PATTERN=="NML_vs_MDD") ORIGINAL_GROUP_A_INDEXES <- group_NML
if(COMPARISON_PATTERN=="NML_vs_MDD") ORIGINAL_GROUP_B_INDEXES <- group_MDD

#
# Weightedなグラフを生成するか、Binarizedなグラフを生成するか
#
#if(isDirected == TRUE) EdgeType1 <- "directed"
#if(isDirected == FALSE) EdgeType1 <- "undirected"
#if(isWeighted == TRUE) EdgeType2 <- "weighted"
#if(isWeighted == FALSE) EdgeType2 <- "binary"

#
# 処理結果出力先
#
#ID <- paste(COMPARISON_PATTERN, "_", TARGET_AREA, "_", EdgeType1, "_", EdgeType2 ,"_", Sys.Date(), sep="")
#ID <- paste(COMPARISON_PATTERN, "_", TARGET_AREA, "_", Sys.Date(), sep="")
#ID <- paste(COMPARISON_PATTERN, "_", TARGET_AREA, sep="")
OUTPUT_FLD_PATH <- paste("./wd_", COMPARISON_PATTERN, "_", TARGET_AREA, "/", sep="")


#
# 採用する相関の閾値設定
#
#P_VALUE_THRESHOLD <- 0.00005
P_VALUE_THRESHOLD <- 0.05 / ( 77 * 77 - 77 ) / 2 #Bonferroni補正
#P_VALUE_THRESHOLD <- 1.00 #「p value = 1」とすれば、フィルタなし（閾値なし）と同等


#
# ログファイルの出力先
#
LOG_FILE_NAME <- "VolCorNetGenerator.log"






